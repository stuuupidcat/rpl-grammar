// RPL Keywords
kw_import  = @{ "import" ~ !WordFollowing }
kw_pattern = @{ "pattern" ~ !WordFollowing }
kw_patt    = @{ "patt" ~ !WordFollowing }
kw_util    = @{ "util" ~ !WordFollowing }
kw_meta    = @{ "meta" ~ !WordFollowing }

// Reserved words
kw_cstr    = @{ "cstr" ~ !WordFollowing }
kw_diag    = @{ "diag" ~ !WordFollowing }

// Rust Keywords
kw_self   = @{ "self" ~ !WordFollowing }
kw_Self   = @{ "Self" ~ !WordFollowing }
kw_fn     = @{ "fn" ~ !WordFollowing }
kw_mut    = @{ "mut" ~ !WordFollowing }
kw_const  = @{ "const" ~ !WordFollowing }
kw_static = @{ "static" ~ !WordFollowing }
kw_lang   = @{ "lang" ~ !WordFollowing }
kw_as     = @{ "as" ~ !WordFollowing }
kw_crate  = @{ "crate" ~ !WordFollowing }
kw_use    = @{ "use" ~ !WordFollowing }

// Space and Comment
COMMENT = _{ "//" ~ (!(NEWLINE) ~ ANY)* | "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
WHITESPACE = _{ " " | "\t" | "\r" | "\n" }

// Symbols
LeftBrace         = @{ "{" }
RightBrace        = @{ "}" }
LeftBracket       = @{ "[" }
RightBracket      = @{ "]" }
LeftParenthesis   = @{ "(" }
RightParenthesis  = @{ ")" }
LessThan          = @{ "<" }
GreaterThan       = @{ ">" }
Dollar            = @{ "$" }
Assign            = @{ "=" }
Comma             = @{ "," }
Dot               = @{ "." }
Dot2              = @{ ".." }
Colon             = @{ ":" }
Colon2            = @{ "::" }
SemiColon         = @{ ";" }
Hash              = @{ "#" }
At                = @{ "@" }
Tilde             = @{ "~" }
Ref               = @{ "&" }
HashTilde         = @{ "#~" }
Bang              = @{ "!" }
Star              = @{ "*" }
Quote             = @{ "'" }
Quote2            = @{ "\"" }
Arrow             = @{ "->" }

// place holder
PlaceHolder       = @{ "_" }

// Literal
Literal = @{ 
    Integer 
  | String 
}

Integer = ${ 
    (("0x" ~ ('0'..'9' | 'a'..'f' | 'A'..'F')+) | ('0'..'9')+) ~ !(WordFollowing | Dot ~ ('0'..'9')) 
}
String = @{ 
    "\"" ~ (!"\"" ~ ANY)* ~ "\"" 
}

// Identifier/ Word Related
WordLeading = @{ 'a' .. 'z' | 'A' .. 'Z' | '\u{4e00}'..'\u{9FA5}'}
WordFollowing = @{ WordLeading | "_" | "-" | '0' .. '9' }
Word = @{ WordLeading ~ (WordFollowing)* }

// RPL identifier and meta variables
Identifier = @{ Word }
MetaVariable = @{ Dollar ~ Word }

// MetaVariable Declaration
MetaVariableDecl = { MetaVariable ~ Colon ~ Word }
MetaVariableDeclList = { 
    LeftBracket ~ (MetaVariableDecl ~ Comma)* ~ MetaVariableDecl ~ Comma? ~ RightBracket 
}

// Attributes
PreItemAttribute = { Hash ~ LeftBracket ~ (Word ~ Comma)* ~ Word ~ Comma? ~ RightBracket }
PostItemAttribute = { HashTilde ~ LeftBracket ~ (Word ~ Comma)* ~ Word ~ Comma? ~ RightBracket }

// Rust Items

Mutability = { kw_mut? }

PtrMutability = {
    kw_mut
  | kw_const
}

Region = {
    Quote ~ (PlaceHolder | kw_static)
}

// FIXME: Identifier 
QSelf = {
    LessThan ~ Type ~ kw_as ~ (Identifier | MetaVariable) ~ GreaterThan 
} 

Path = {
    PathLeading? ~ PathSegment ~ (Colon2 ~ PathSegment)*
}

PathArguments = {
    AngleBracketedGenericArguments
}

Pathcrate = {
    Dollar ~ kw_crate
}

PathLeading = {
    Colon2
  | Pathcrate ~ Colon2
}

PathSegment = {
    (Identifier | MetaVariable) ~ PathArguments?
}

TypePath = {
    QSelf? ~ Path
}

Konst = {
    Literal | TypePath
}

BracedKonst = {
    LeftBrace ~ Konst ~ RightBrace
}

GenericConst = {
    BracedKonst | Konst
}

GenericArgument = {
    Region | Type | GenericConst
}

AngleBracketedGenericArguments = {
    Colon2? ~ LessThan ~ (GenericArgument ~ Comma)* ~ GenericArgument ~ Comma? ~ GreaterThan
}

LangItemWithArgs = {
    Hash ~ LeftBracket ~ kw_lang ~ Assign ~ String ~ RightBracket ~ AngleBracketedGenericArguments?
}

TypeArray = {
    LeftBracket ~ Type ~ SemiColon ~ Integer ~ RightBracket
}

TypeGroup = {
    "Group" ~ Type
}

TypeNever = {
    Bang
}

TypeParen = {
    LeftParenthesis ~ Type ~ RightParenthesis
}

TypePtr = {
    Star ~ PtrMutability? ~ Type
}

TypeReference = {
    Ref ~ Region? ~ PtrMutability? ~ Type
}

TypeSlice = {
    LeftBracket ~ Type ~ RightBracket
}

TypeTuple = {
    LeftParenthesis ~ (Type ~ Comma)* ~ Type ~ Comma? ~ RightParenthesis
}

TypeMetaVariable = {
    MetaVariable
}

Type = {
    TypeArray
  | TypeGroup
  | TypeNever
  | TypeParen
  | TypePath
  | TypePtr
  | TypeReference
  | TypeSlice
  | TypeTuple
  | TypeMetaVariable
  | LangItemWithArgs
  | kw_Self
}

SelfParam = {
    Ref? ~ Mutability ~ kw_self ~ (Colon ~ Type)?
}

FnParam = {
    SelfParam 
  | NormalParam
  | Dot2
}

ParamPat = {
    Mutability ~ (Identifier | MetaVariable)
}

NormalParam = {
    ParamPat? ~ Colon ~ Type
}

FnSig = { 
    kw_fn ~ (Identifier | PlaceHolder) ~ LeftParenthesis ~ (FnParam ~ Comma)* ~ FnParam ~ Comma? ~ RightParenthesis ~ FnRet
}

FnBody = {
    SemiColon
  // | MirBody
}

FnRet = {
    Arrow ~ (Type | PlaceHolder)
}

Fn = { FnSig ~ FnBody }

RustItem = { Fn }

// patt block Item 
pattBlockItem = { Identifier ~ MetaVariableDeclList? ~ Assign ~ PreItemAttribute? ~ RustItem ~ PostItemAttribute?}

// RPL Blocks
pattBlock = {
    kw_patt ~ LeftBrace ~ (pattBlockItem)* ~ RightBrace
}
utilBlock = {
    kw_util ~ LeftBrace ~ (pattBlockItem)* ~ RightBrace
}
Block = _{ pattBlock | utilBlock }

// RPL Header
RPLHeader = { kw_pattern ~ Identifier }

// RPL Pattern
RPLPattern = { RPLHeader ~ Block* }

// RPL File entry
main = { SOI ~ RPLPattern ~ EOI }




